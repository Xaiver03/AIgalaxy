// PostgreSQL schema for Vercel deployment
// Rename this to schema.prisma after backing up the SQLite version

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // Uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // Direct connection for migrations
}

model Agent {
  id          String   @id @default(cuid())
  name        String
  description String
  tags        String[] // PostgreSQL supports arrays natively
  manager     String
  guideUrl    String?  @map("guide_url")
  homepage    String?
  icon        String?
  coverImage  String?  @map("cover_image")
  guideContent String? @map("guide_content") @db.Text
  themeColor  String?  @default("#FFFFFF") @map("theme_color")
  enabled     Boolean  @default(true)
  clickCount  Int      @default(0) @map("click_count")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  applications AgentApplication[]
  feedback     AgentFeedback[]

  // Indexes for performance
  @@index([enabled, clickCount])
  @@index([tags])
  @@map("agents")
}

model AgentApplication {
  id            String   @id @default(cuid())
  agentId       String   @map("agent_id")
  applicantName String   @map("applicant_name")
  email         String
  reason        String?  @db.Text
  status        ApplicationStatus @default(PENDING)
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  agent Agent @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@index([agentId])
  @@index([status])
  @@map("agent_applications")
}

model AgentFeedback {
  id        String   @id @default(cuid())
  agentId   String   @map("agent_id")
  userName  String   @map("user_name")
  email     String?
  score     Int      @default(5)
  comment   String?  @db.Text
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  agent Agent @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@index([agentId])
  @@map("agent_feedback")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  role      UserRole @default(USER)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model Admin {
  id                String   @id @default(cuid())
  email             String   @unique
  password          String
  name              String
  role              String   @default("admin")
  canChangePassword Boolean  @default(false) @map("can_change_password")
  canManageAdmins   Boolean  @default(false) @map("can_manage_admins")
  createdBy         String?  @map("created_by")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  @@map("admins")
}

model FeedbackConfig {
  id                  String   @id @default(cuid())
  productFeedbackUrl  String   @map("product_feedback_url")
  platformFeedbackUrl String   @map("platform_feedback_url")
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")

  @@map("feedback_config")
}

model FeedbackButton {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  url         String
  icon        String?
  color       String?
  order       Int      @default(0)
  enabled     Boolean  @default(true)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@index([enabled, order])
  @@map("feedback_buttons")
}

model StarMagnitudeConfig {
  id          String   @id @default(cuid())
  magnitude   Int      @unique
  minClicks   Int
  maxClicks   Int?
  size        Float
  brightness  Float
  glow        Float
  color       String
  label       String
  description String?  @db.Text
  isEnabled   Boolean  @default(true)
  orderIndex  Int
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@index([isEnabled])
  @@map("star_magnitude_configs")
}

model Danmaku {
  id        String   @id @default(cuid())
  text      String
  color     String   @default("#FFFFFF")
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent") @db.Text
  createdAt DateTime @default(now()) @map("created_at")

  @@index([createdAt])
  @@map("danmakus")
}

model DanmakuConfig {
  id        String   @id @default(cuid())
  enabled   Boolean  @default(true)
  maxLength Int      @default(20)
  playSpeed Float    @default(1.0)
  batchSize Int      @default(10)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("danmaku_config")
}

// Enums for PostgreSQL
enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}